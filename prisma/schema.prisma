// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  class     String   // B2, B3, M1, M2
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments CourseEnrollment[]
  submissions PracticeSubmission[]
  progress    UserProgress[]
  lessonCompletions LessonCompletion[]
  moduleCompletions ModuleCompletion[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  duration    String
  lessons     Int
  difficulty  String
  order       Int      // For sequential unlocking
  isUnlocked  Boolean  @default(false) // Manual unlock control
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  enrollments CourseEnrollment[]
  modules     Module[]
  lessons_rel Lesson[] // Keep for backward compatibility during migration
  practices   PracticeQuest[]
  progress    UserProgress[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int
  courseId    String
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course           Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons          Lesson[]
  practiceQuests   PracticeQuest[]
  moduleCompletions ModuleCompletion[]

  @@map("modules")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String   // JSON or markdown content
  order       Int
  courseId    String?  // Make optional for backward compatibility
  moduleId    String?  // New field for module relationship
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course?           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module      Module?           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  completions LessonCompletion[]

  @@map("lessons")
}

model ModuleCompletion {
  id          String   @id @default(cuid())
  userId      String
  moduleId    String
  completedAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@map("module_completions")
}

model LessonCompletion {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completedAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_completions")
}

model CourseEnrollment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime @default(now())
  completedAt  DateTime?
  isCompleted  Boolean  @default(false)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model UserProgress {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  progress   Int      @default(0) // 0-100
  updatedAt  DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("user_progress")
}

model PracticeQuest {
  id          String   @id @default(cuid())
  title       String
  description String
  difficulty  String   // easy, medium, hard
  courseId    String?  // Make optional for backward compatibility
  moduleId    String?  // New field for module relationship
  testCases   Json     // Array of test cases
  solution    String   // Expected solution
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course?              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module      Module?              @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  submissions PracticeSubmission[]

  @@map("practice_quests")
}

model PracticeSubmission {
  id          String   @id @default(cuid())
  userId      String
  questId     String
  code        String
  isCorrect   Boolean  @default(false)
  score       Int      @default(0)
  submittedAt DateTime @default(now())

  // Relations
  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest PracticeQuest @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@map("practice_submissions")
}